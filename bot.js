const { Telegraf } = require("telegraf");
const { createClient } = require('@supabase/supabase-js');
require("dotenv").config();
const { BOT_TOKEN } = process.env;
const bot = new Telegraf(BOT_TOKEN);

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY // –∏–ª–∏ SERVICE_ROLE_KEY (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
);

const userStates={};
const userHabits = {};

bot.start((ctx) =>{
    const userId = ctx.from.id.toString();
     console.log(`[üöÄ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å  (ID: ${userId}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.`);
  ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à Telegram-–±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫. –ù–∞–ø–∏—à–∏ –º–Ω–µ /start –∏ –º—ã –≤–º–µ—Å—Ç–µ –Ω–∞—á–Ω–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ª—é–±—ã–µ –≤–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –∏–ª–∏ –¥–µ–ª–∞",
    {
      reply_markup: {
        keyboard: [
          [
            "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É","–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫"
            
          ],
        ],
      },
    }
  )}
);
bot.help((ctx) =>
  ctx.reply("–Ø —Ä–µ–∞–≥–∏—Ä—É—é –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
);

bot.hears('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', ctx=>{
    userStates[ctx.from.id]='waiting_for_habit_name';
    ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏');
    
})



bot.hears('–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫', async (ctx) => {
  const userId = ctx.from.id.toString();
  console.log("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º user_id (—Å—Ç—Ä–æ–∫–∞):", JSON.stringify(userId));

  // ‚úÖ –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const result = await supabase
    .from('habits')
    .select('id, title')
    .eq('user_id', userId)
    .order('created_at', { ascending: true });

  // ‚úÖ –¢–µ–ø–µ—Ä—å –∏–∑–≤–ª–µ–∫–∞–µ–º data –∏ error
  const { data, error } = result;
  console.log("üìä –û—Ç–≤–µ—Ç –æ—Ç Supabase:", { data, error });

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫:', error);
    return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏.');
  }

  if (!data || data.length === 0) {
    return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ–¥–Ω—É!');
  }

  const inlineKeyboard = data.map(habit => [
    { text: habit.title, callback_data: `view_${habit.id}` },
    { text: "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å", callback_data: `mark_${habit.id}` }
  ]);

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', {
    reply_markup: {
      inline_keyboard: inlineKeyboard
    }
  });
});



bot.on("text", async (ctx) => {
  const userId = ctx.from.id.toString(); 
  const text = ctx.message.text;

  if (text === "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É" || text === "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫") return;

  if (userStates[userId] === "waiting_for_habit_name") {
    delete userStates[userId];

    const { data, error } = await supabase
      .from('habits')
      .insert({ user_id: userId, title: text });

    if (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É.');
    } else {
      console.log(`[+] –ü—Ä–∏–≤—ã—á–∫–∞ "${text}" –æ—Ç ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î`);
      ctx.reply(`‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ "${text}" –¥–æ–±–∞–≤–ª–µ–Ω–∞!`);
    }
    return;
  }
});




function getToday() {
  const now = new Date();
  return new Date(now.getTime() - now.getTimezoneOffset() * 60000)
    .toISOString()
    .split('T')[0];
}

bot.action(/mark_(.+)/, async (ctx) => {
  const habitId = ctx.match[1];
  const userId = ctx.from.id.toString();
  const today = getToday();
  console.log("üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ (–ø–æ —Å–µ—Ä–≤–µ—Ä—É):", today);

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É
  const { data: habitData, error: habitError } = await supabase
    .from('habits')
    .select('title')
    .eq('id', habitId)
    .eq('user_id', userId)
    .single();

  if (habitError || !habitData) {
    console.error("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id:", userId, "–∏ habitId:", habitId);
    return ctx.answerCbQuery('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
  }

  const habit = habitData;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–º–µ—á–µ–Ω–∞ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
  const { data: existingRecord, error: existingError } = await supabase
    .from('habit_records')
    .select('id')
    .eq('habit_id', habitId)
    .eq('record_date', today)
    .maybeSingle();

  console.log("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–º–µ—Ç–∫–∏:", { existingRecord, existingError });

  if (existingRecord) {
    return ctx.answerCbQuery('‚úÖ –£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è!');
  }

  // –û—Ç–º–µ—á–∞–µ–º
  const { error: insertError } = await supabase
    .from('habit_records')
    .insert({
      habit_id: habitId,
      user_id: userId,
      record_date: today,
    });

  if (insertError) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏:', insertError);
    return ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.');
  }

  console.log(`[‚úì] ${userId} –æ—Ç–º–µ—Ç–∏–ª "${habit.title}" –Ω–∞ ${today}`);
  return ctx.answerCbQuery(`‚úÖ "${habit.title}" –æ—Ç–º–µ—á–µ–Ω–æ!`);
});

bot.launch();

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");




